
struct Points {
    right : i64,
    left : i64
}

struct Node {
    idx : i64,
    val : i64,
    point : Points
}

struct ValoresPiv{
    first: i64,
    last:i64,
    count:i64
}


fn InsertFirst(val : i64, actualDL : &mut Vec<Node>, valores: &mut ValoresPiv){



    if (valores.first !=  -1) {

        let indice = actualDL[valores.first as usize].idx;

        valores.first = valores.count;

        actualDL[valores.first as usize].val = val;
        actualDL[valores.first as usize].idx = valores.first;


        actualDL[valores.first as usize].point.left = -1;
        actualDL[valores.first as usize].point.right = indice;


        actualDL[indice as usize].point.left = valores.first ;

    } else{
        valores.first = valores.count;
        valores.last = valores.first;


        //let ind:usize = valores.count as usize;
        actualDL[valores.count as usize].idx = valores.count;
        actualDL[valores.count as usize].val = val;
        actualDL[valores.count as usize].point.left = -1;
        actualDL[valores.count as usize].point.right = -1;

    }




    valores.count = valores.count + 1;


}


fn InsertLast(val : i64, actualDL : &mut Vec<Node>, valores: &mut ValoresPiv){



    if (valores.first !=  -1) {

        let indice = actualDL[valores.last as usize].idx;

        valores.last = valores.count;

        actualDL[valores.last as usize].val = val;
        actualDL[valores.last as usize].idx = valores.last;


        actualDL[valores.last as usize].point.left = indice;
        actualDL[valores.last as usize].point.right = -1;


        actualDL[indice as usize].point.right = valores.count ;

    } else{
        valores.first = valores.count;
        valores.last = valores.first;


        //let ind:usize = valores.count as usize;
        actualDL[valores.count as usize].idx = valores.count;
        actualDL[valores.count as usize].val = val;
        actualDL[valores.count as usize].point.left = -1;
        actualDL[valores.count as usize].point.right = -1;

    }




    valores.count = valores.count + 1;


}



fn InsertInto(val : i64, pos:i64, actualDL : &mut Vec<Node>, valores: &mut ValoresPiv){


    let mut i : i64 = 0;

    if (valores.first == -1) || (pos == 0){
        InsertFirst(val,actualDL,valores);
    }else if ((valores.count - 1) == pos) {
        InsertLast(val,actualDL,valores);
    } else{

        // root = actualDL[first];

        //root
        let mut indice:i64 = actualDL[valores.first as usize].idx;
        let mut auxIndice = 0;
        let mut rootIndice:i64 = indice;


        loop {

            auxIndice = actualDL[rootIndice as usize].idx;
            let otro:i64 = actualDL[rootIndice as usize].point.right;
            rootIndice = actualDL[otro as usize].idx;
            i = i + 1;
            if i == pos {
                break;
            }
        }


        let posicionNueva = valores.count;

        actualDL[auxIndice as usize].point.right = posicionNueva;


        actualDL[rootIndice as usize].point.left = posicionNueva ;

        actualDL[valores.count as usize].idx = valores.count;
        actualDL[valores.count as usize].val = val;
        actualDL[valores.count as usize].point.left = auxIndice;
        actualDL[valores.count as usize].point.right = rootIndice;

        valores.count = valores.count + 1;
    }
}




fn PrintListNormal(actualDL : &mut Vec<Node>, valores: &mut ValoresPiv){


    if (valores.first !=  -1){
        let mut i = valores.first;
        let mut actual = 0;
        loop{
            actual = actualDL[i as usize].idx;
            println!("Val|| de nodo: {} ", actualDL[actual as usize].val);
            i = actualDL[actual as usize].point.right;


            if actual == valores.last{
                break;
            }

        }
    }

}


fn PrintListBack(actualDL : &mut Vec<Node>, valores: &mut ValoresPiv){


    if (valores.first !=  -1){
        let mut i = valores.last;
        let mut actual = 0;
        loop{
            actual = actualDL[i as usize].idx;
            println!("Val|| de nodo: {} ", actualDL[actual as usize].val);
            i = actualDL[actual as usize].point.left;


            if actual == valores.first{
                break;
            }

        }
    }

}



fn main(){


    let mut actualDL: Vec<Node> = Vec::with_capacity(10);

    actualDL.push(Node{idx :0,val:0, point:Points{left:0,right:0}});
    actualDL.push(Node{idx :0,val:0, point:Points{left:0,right:0}});
    actualDL.push(Node{idx :0,val:0, point:Points{left:0,right:0}});
    actualDL.push(Node{idx :0,val:0, point:Points{left:0,right:0}});
    actualDL.push(Node{idx :0,val:0, point:Points{left:0,right:0}});
    actualDL.push(Node{idx :0,val:0, point:Points{left:0,right:0}});
    actualDL.push(Node{idx :0,val:0, point:Points{left:0,right:0}});
    actualDL.push(Node{idx :0,val:0, point:Points{left:0,right:0}});
    actualDL.push(Node{idx :0,val:0, point:Points{left:0,right:0}});
    actualDL.push(Node{idx :0,val:0, point:Points{left:0,right:0}});


    let mut refs: ValoresPiv = ValoresPiv{first:-1,count:0,last:-1};


    println!("Primero: {},  Ultimo: {}, Tama√±o: {}",  refs.first,refs.last, refs.count);

    println!("---Insertar al inicio---");
    InsertFirst(10, &mut actualDL, &mut refs);



}


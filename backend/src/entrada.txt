// PILA
fn pila_vacia(vec: &mut Vec<i64>) -> bool {
    vec.len() == 0
}

fn apilar(capacidad: usize, vec: &mut Vec<i64>, value: i64) {
    if vec.len() < capacidad {
        vec.insert(vec.len(), value);
    } else {
        println!("La pila ha llegado a su maxima capacidad");
    }
}

fn desapilar(vec: &mut Vec<i64>) -> i64 {
    if !pila_vacia(vec) {
        return vec.remove(vec.len()-1);
    } else {
        println!("La pila no tiene elementos");
    }
    0
}

// COLA
fn cola_vacia(vec: &mut Vec<i64>) -> bool {
    vec.len() == 0
}

fn encolar(capacidad: usize, vec: &mut Vec<i64>, value: i64) {
    if vec.len() < capacidad {
        vec.push(value);
    } else {
        println!("La cola ha llegado a su maxima capacidad");
    }
}

fn desencolar(vec: &mut Vec<i64>) -> i64 {
    if !cola_vacia(vec) {
        return vec.remove(0);
    } else {
        println!("La cola no tiene elementos");
    }
    0
}

fn main() {
    let capacidad: usize = 10;
    let mut pila: Vec<i64> = Vec::with_capacity(capacidad - 2);
    let mut cola: Vec<i64> = vec![1,2,3,4,5];

}

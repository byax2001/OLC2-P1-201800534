#include <stdio.h>
float HEAP[78000];
float STACK[10000];
float P;
float H;
float t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,t32,t33,t34,t35,t36,t37,t38,t39;


int main(){
t0 = H;
H = H + 3;
/* Declaracion var struct: nombre */
/* Metodo ToString o ToOwned */
/* Por si es booleano el resultado a pasar a string */
t1 = H;
/* Primitivo tipo STR: "Fer" */
t2 = H  ;
HEAP[(int)H] = 70;
H = H + 1;
HEAP[(int)H] = 101;
H = H + 1;
HEAP[(int)H] = 114;
H = H + 1;
HEAP[(int)H] = -1;
H = H + 1;
/* Ingreso al Heap por el puntero */
t3 = t0 + 0;
HEAP[(int)t3] = t2;
/* Declaracion var struct: edad */
/* Ingreso al Heap por el puntero */
t4 = t0 + 1;
HEAP[(int)t4] = 18;
/* Declaracion var struct: descripcion */
/* Metodo ToString o ToOwned */
/* Por si es booleano el resultado a pasar a string */
t5 = H;
/* Primitivo tipo STR: "No hace nada" */
t6 = H  ;
HEAP[(int)H] = 78;
H = H + 1;
HEAP[(int)H] = 111;
H = H + 1;
HEAP[(int)H] = 32;
H = H + 1;
HEAP[(int)H] = 104;
H = H + 1;
HEAP[(int)H] = 97;
H = H + 1;
HEAP[(int)H] = 99;
H = H + 1;
HEAP[(int)H] = 101;
H = H + 1;
HEAP[(int)H] = 32;
H = H + 1;
HEAP[(int)H] = 110;
H = H + 1;
HEAP[(int)H] = 97;
H = H + 1;
HEAP[(int)H] = 100;
H = H + 1;
HEAP[(int)H] = 97;
H = H + 1;
HEAP[(int)H] = -1;
H = H + 1;
/* Ingreso al Heap por el puntero */
t7 = t0 + 2;
HEAP[(int)t7] = t6;
t8 = P + 0;
STACK[(int)t8] = t0;
t9 = H;
H = H + 3;
/* Declaracion var struct: nombre */
/* Metodo ToString o ToOwned */
/* Por si es booleano el resultado a pasar a string */
t10 = H;
/* Primitivo tipo STR: "Fer" */
t11 = H  ;
HEAP[(int)H] = 70;
H = H + 1;
HEAP[(int)H] = 101;
H = H + 1;
HEAP[(int)H] = 114;
H = H + 1;
HEAP[(int)H] = -1;
H = H + 1;
/* Ingreso al Heap por el puntero */
t12 = t9 + 0;
HEAP[(int)t12] = t11;
/* Declaracion var struct: edad */
/* Ingreso al Heap por el puntero */
t13 = t9 + 1;
HEAP[(int)t13] = 18;
/* Declaracion var struct: descripcion */
/* Metodo ToString o ToOwned */
/* Por si es booleano el resultado a pasar a string */
t14 = H;
/* Primitivo tipo STR: "Maneja un carro" */
t15 = H  ;
HEAP[(int)H] = 77;
H = H + 1;
HEAP[(int)H] = 97;
H = H + 1;
HEAP[(int)H] = 110;
H = H + 1;
HEAP[(int)H] = 101;
H = H + 1;
HEAP[(int)H] = 106;
H = H + 1;
HEAP[(int)H] = 97;
H = H + 1;
HEAP[(int)H] = 32;
H = H + 1;
HEAP[(int)H] = 117;
H = H + 1;
HEAP[(int)H] = 110;
H = H + 1;
HEAP[(int)H] = 32;
H = H + 1;
HEAP[(int)H] = 99;
H = H + 1;
HEAP[(int)H] = 97;
H = H + 1;
HEAP[(int)H] = 114;
H = H + 1;
HEAP[(int)H] = 114;
H = H + 1;
HEAP[(int)H] = 111;
H = H + 1;
HEAP[(int)H] = -1;
H = H + 1;
/* Ingreso al Heap por el puntero */
t16 = t9 + 2;
HEAP[(int)t16] = t15;
t17 = P + 1;
STACK[(int)t17] = t9;
t18 = H;
H = H + 3;
/* Declaracion var struct: placa */
/* Metodo ToString o ToOwned */
/* Por si es booleano el resultado a pasar a string */
t19 = H;
/* Primitivo tipo STR: "090PLO" */
t20 = H  ;
HEAP[(int)H] = 48;
H = H + 1;
HEAP[(int)H] = 57;
H = H + 1;
HEAP[(int)H] = 48;
H = H + 1;
HEAP[(int)H] = 80;
H = H + 1;
HEAP[(int)H] = 76;
H = H + 1;
HEAP[(int)H] = 79;
H = H + 1;
HEAP[(int)H] = -1;
H = H + 1;
/* Ingreso al Heap por el puntero */
t21 = t18 + 0;
HEAP[(int)t21] = t20;
/* Declaracion var struct: color */
/* Metodo ToString o ToOwned */
/* Por si es booleano el resultado a pasar a string */
t22 = H;
/* Primitivo tipo STR: "gris" */
t23 = H  ;
HEAP[(int)H] = 103;
H = H + 1;
HEAP[(int)H] = 114;
H = H + 1;
HEAP[(int)H] = 105;
H = H + 1;
HEAP[(int)H] = 115;
H = H + 1;
HEAP[(int)H] = -1;
H = H + 1;
/* Ingreso al Heap por el puntero */
t24 = t18 + 1;
HEAP[(int)t24] = t23;
/* Declaracion var struct: tipo */
/* Metodo ToString o ToOwned */
/* Por si es booleano el resultado a pasar a string */
t25 = H;
/* Primitivo tipo STR: "mecanico" */
t26 = H  ;
HEAP[(int)H] = 109;
H = H + 1;
HEAP[(int)H] = 101;
H = H + 1;
HEAP[(int)H] = 99;
H = H + 1;
HEAP[(int)H] = 97;
H = H + 1;
HEAP[(int)H] = 110;
H = H + 1;
HEAP[(int)H] = 105;
H = H + 1;
HEAP[(int)H] = 99;
H = H + 1;
HEAP[(int)H] = 111;
H = H + 1;
HEAP[(int)H] = -1;
H = H + 1;
/* Ingreso al Heap por el puntero */
t27 = t18 + 2;
HEAP[(int)t27] = t26;
t28 = P + 2;
STACK[(int)t28] = t18;
t29 = H;
H = H + 3;
/* Declaracion var struct: placa */
/* Metodo ToString o ToOwned */
/* Por si es booleano el resultado a pasar a string */
t30 = H;
/* Primitivo tipo STR: "P0S921" */
t31 = H  ;
HEAP[(int)H] = 80;
H = H + 1;
HEAP[(int)H] = 48;
H = H + 1;
HEAP[(int)H] = 83;
H = H + 1;
HEAP[(int)H] = 57;
H = H + 1;
HEAP[(int)H] = 50;
H = H + 1;
HEAP[(int)H] = 49;
H = H + 1;
HEAP[(int)H] = -1;
H = H + 1;
/* Ingreso al Heap por el puntero */
t32 = t29 + 0;
HEAP[(int)t32] = t31;
/* Declaracion var struct: color */
/* Metodo ToString o ToOwned */
/* Por si es booleano el resultado a pasar a string */
t33 = H;
/* Primitivo tipo STR: "verde" */
t34 = H  ;
HEAP[(int)H] = 118;
H = H + 1;
HEAP[(int)H] = 101;
H = H + 1;
HEAP[(int)H] = 114;
H = H + 1;
HEAP[(int)H] = 100;
H = H + 1;
HEAP[(int)H] = 101;
H = H + 1;
HEAP[(int)H] = -1;
H = H + 1;
/* Ingreso al Heap por el puntero */
t35 = t29 + 1;
HEAP[(int)t35] = t34;
/* Declaracion var struct: tipo */
/* Metodo ToString o ToOwned */
/* Por si es booleano el resultado a pasar a string */
t36 = H;
/* Primitivo tipo STR: "automatico" */
t37 = H  ;
HEAP[(int)H] = 97;
H = H + 1;
HEAP[(int)H] = 117;
H = H + 1;
HEAP[(int)H] = 116;
H = H + 1;
HEAP[(int)H] = 111;
H = H + 1;
HEAP[(int)H] = 109;
H = H + 1;
HEAP[(int)H] = 97;
H = H + 1;
HEAP[(int)H] = 116;
H = H + 1;
HEAP[(int)H] = 105;
H = H + 1;
HEAP[(int)H] = 99;
H = H + 1;
HEAP[(int)H] = 111;
H = H + 1;
HEAP[(int)H] = -1;
H = H + 1;
/* Ingreso al Heap por el puntero */
t38 = t29 + 2;
HEAP[(int)t38] = t37;
t39 = P + 3;
STACK[(int)t39] = t29;
return 0;
}

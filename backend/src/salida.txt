#include <stdio.h>
float HEAP[78000];
float STACK[10000];
float P;
float H;
float t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23;


int main(){
/* Declaracion de Vector: x */
/* Exp Vec! */
t0 = H;
/* Tamanio Vec! */
HEAP[(int)H] = 4;
/* --------------- */
H = H + 1;
HEAP[(int)H] = 2;
H = H + 1;
HEAP[(int)H] = 3;
H = H + 1;
HEAP[(int)H] = 4;
H = H + 1;
HEAP[(int)H] = 5;
H = H + 1;
t1 = P + 0;
STACK[(int)t1] = t0;
/* Instruccion Print */
/* Primitivo tipo STR */
t2 = H  ;
HEAP[(int)H] = 123;
H = H + 1;
HEAP[(int)H] = 125;
H = H + 1;
HEAP[(int)H] = -1;
H = H + 1;
/* Por si la expresiona imprimir es booleana */
t4 = H;
/* Len de Vector x */
P = P - t6;
t8 = P + 0;
t7 = STACK[(int)t8];
P = P + t6;
t5 = HEAP[(int)t7 ];
/* End Insert */
/* Para saber donde iniciar a imprimir luego del proceso */
t3 = H;
/* Print Complex P.1 */
t9 = t2  ;
L0:
t10 = HEAP[(int)t9 ];
if(t10 == (char)123) goto L3;
HEAP[(int)H] = t10;
H = H + 1;
t9 = t9 + 1;
goto L0;
/* Print Complex P.2 */
L3:
t9 = t9 + 1;
L1:
t10 = HEAP[(int)t9 ];
if(t10 == (char)125) goto L4;
t9 = t9 + 1;
goto L1;
/* Print Complex P.3 */
L4:
t9 = t9 + 1;
/* Num to String */
t11 = t5;
t12 = H;
t13 = t11  ;
L6:
t14 = t13 / 10;
t15 = (int)t14;
if(t15 == 0) goto L7;
t16 = (int)t13%10;
t13 = t15;
HEAP[(int)H] = (int)t16 +48;
H = H + 1;
goto L6;
L7:
HEAP[(int)H] = (int)t13+48;
H = H + 1;
/* sort_revers */
t17 = t12;
t18 = H-1;
L8:
if(t17 >= t18) goto L9;
t19 = HEAP[(int)t18 ];
t20 = HEAP[(int)t17 ];
HEAP[(int)t17] = t19;
HEAP[(int)t18] = t20;
t17 = t17 + 1;
t18 = t18 - 1;
goto L8;
L9:
/* Print Complex P.4 */
L2:
t10 = HEAP[(int)t9 ];
if(t10 == -1) goto L5;
HEAP[(int)H] = t10;
H = H + 1;
t9 = t9 + 1;
goto L2;
/* Salida print Complex */
L5:
HEAP[(int)H] = -1;
H = H + 1;
/* Impresion */
t22 = t3  ;
L10:
t23 = HEAP[(int)t22 ];
if(t23 != -1) goto L11;
goto L12;
L11:
printf("%c",(char)t23);
t22 = t22 + 1;
goto L10;
L12:
printf("%c",10);
return 0;
}
